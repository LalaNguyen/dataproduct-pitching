?mtcars
split(mtcars,mtcars$cyl)
lapply(split(mtcars,mtcars$cyl),"mpg")
lapply(split(mtcars,mtcars$cyl),mean)
apply(split(mtcars,mtcars$cyl),2, mean)
s <- split(mtcars,mtcars$cyl)
lappy(s,mean)
lapply(s,mean)
s
apply(s,2,mean)
lappy(s, function(x) apply(x,2,mean))
lapply(s, function(x) apply(x,2,mean))
lapply(s, function(x) class(x))
s
class(s)
class iris
class(mtcars)
apply(mtcars,2,mean)
sapply(mtcars,mtcars$cyl,mean)
with(mtcars,tapply(mtcars$mpg,mtcars$cyl,mean))
with(mtcars,tapply(mtcars$hp,mtcars$cyl,mean))
s <- with(mtcars,tapply(mtcars$hp,mtcars$cyl,mean))
s[1]-s[3]
abs(s[1]-s[3])
traceback()
lm(y~x)
traceback()
ls
debug(ls)
ls
debug(ls)
ls
?ls
exit
quit
quit()
n''
nnn
set.seed(1)
rpois(5,2
)
set.seed(10
)
x <- rep(0:1,each=5)
x
airquality
melt_data <- melt(data, id=c("Ozone","Wind"))
library("reshape""
)
)
''
)
""
library("reshape")
melt_data <- melt(data, id=c("Ozone","Wind"))
head(melt_data)
melt_data
melt_data <- melt(airquality, id=c("Ozone","Wind"))
head(melt_data)
polyroot()
polyroot(z = c(1,5,1,255))
install.packages("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl()
5+7
x <- 5+7
x
x - 3
y <- x-3
y
c(1.1,9,3.14)
z <- c(1.1, 9, 3.14)
?
c
z
a <- c(z,555,z)
c(z,555,z)
z*2 +100
sqrt(z-1)
my_sqrtsqrt(z-1)
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
c(1,2,3,4) + c(0,10,1000)
z*2 +1000
my_div
getwd()
ls()
x <- 9
ls
ls()
list.files()
?list.files
args(list.files)
old.dir
old.dir <- getwd()
dir.create()
dir.create("testdir")
list.files
list.files()
setwd("testdir/"
)
file.create("mytest.R")
list.files()
file.exists(
"mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R",to = "mytest3.R")
file.path("mytest3.R")
file.path("folder1","folder2")
?dir.create
dir.create(file.path("testdir2","testdir3"),recursive=TRUE)
unlink("testdir2/")
unlink("testdir2/", recursive = TRUE)
unlink("testdir2", recursive = TRUE)
setwd("../")
setwd("old.dir")
getwd()
setwd(old.dir)
unlink("testdir/")
unlink("testdir",recursive = TRUE)
0
exit()
bye()
swirl()
1:20
pi : 20
pi : 10
15:1
:
?`:`
seq(1,20)
seq(0,10,by=0.5)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
?seq_along
rep(0,times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each = 10 )
c(0.5,55,-10,6)
vector(0.5,55,-10,6)
info()
num_vect <- c(0.5,55,-10,6)
tf <- num_vect[num_vect < 1,]
tf <- num_vect[num_vect < 1]
tf <- num_vect <1
tf
a <- num_vect >=6
num_vect >= 6
my_char <- c("My","name","is")
my_char
paste(my_char,collapse=" ")
c(my_char, "Minh")
my_name<-c(my_char, "Minh")
my_name
paste(my_name,collapse = " ")
paste("Hello", "world!", sep="")
paste("Hello", "world!", sep=" ")
paste(1:3, c("X","Y","Z"), sep=" ")
paste(1:3, c("X","Y","Z"), sep="")
paste(LETTERS, 1:4, sep="")
paste(LETTERS, 1:4, sep="-")
c(44,NA,5,NA)
x<-c(44,NA,5,NA)
x*3
y <- norm(1000)
y <- rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
1
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x)&x>0]
c(1:10)
c(3,5,7)
[c(3,5,7)]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11,bar =2 , norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2)<-c("foo","bar", "norf")
indentical(vect,vect2)
identical(vect,vect2)
vect["bar"]
vect[c("bar","foo")]
vect[vect$bar =2 ,c("bar","foo")]
vect[vect$bar ==2 ,c("bar","foo")]
vect["bar" ==2 ,c("bar","foo")]
vect[c("foo","bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
my_vector
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20,nrow = 4, ncol = 5 )
identical(my_matrix2,my_matrix)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
names(my_data) <- c("patient","age","weight","bp","rating","test")
cnames <- c("patient","age","weight","bp","rating","test")
colnames(my_data)
colnames(my_data) <- cnames
names(my_data)
my_data
1==1
TRUE == TRUE
(FALSE == TRUE)==FALSE
6 == 7
6 < 6
6 < 7
10 <= 10
5 != 7
not(5 == 7)
not (5 == 7)
NOT 5 == 7
NOT (5 == 7)
?not
?`NOT`
not(5==7)
!(5==7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins','twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints >5
which(ints>7)
any(ints <0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
submit()
submit()
submit()
submit()
info()
7 %% 2
7 %% 2
info()
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num =   5)
remainder(4, div = 2)
args(remainder)
args(remainder)
submit()
c(1.4, 3.6, 7.9, 8.8)
evaluate(median,c(1.4, 3.6, 7.9, 8.8))
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x)x[1],c(8, 4, 0))
evaluate(function(x) x[1],c(8, 4, 0))
evaluate(function(x) x[1],c(8, 4, 0))
evaluate(function(x) x[0],c(8, 4, 0))
evaluate(function(x) x[1],c(8, 4, 0))
evaluate(function(x) x,c(8, 4, 0))
evaluate(function(x) x[1],c(8, 4, 0))
evaluate(function(x) x[2],c(8, 4, 0))
info()
evaluate(function(x) x[1],c(8, 4, 0))
evaluate(function(x) x[],c(8, 4, 0))
evaluate(function(x) {x[1]},c(8, 4, 0))
evaluate(function(x){x[3]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming","is","fun!")
submit()
submit()
submit()
submit()
submit()
telegram("Hello","Bitch")
submit()
submit()
mad_libs("a","b","c")
submit()
submit()
submit()
'I' %p% 'love' %p% 'R!'
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list
)
as.character(cls_list)
?sapply
cls_list <- sapply(flags,class)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors<-flags[,11:17]
head(flag_colors,6)
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes<-flags[,19:23]
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range())
shape_mat <- sapply(flag_shapes,range
)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags,unique)
unique_vals
sapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags,unique)
flags
View(flags)
vapply(flags, unique, numeric(1))
ok()
sapply(flags,class)
class(flags)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period
)
str()
str(plants)
sample()
?sample
sample(1:6,4,replace=TRUE)
sample(1:6,4,replace=TRUE)
sample(1:20,10)
sample(1:20,LETTERS)
sample(LETTERS,10)
LETTERS
sample(LETTERS)
flips <- sample(0:1,100,replace = TRUE)
flips <- sample(c(0,1),100,replace = TRUE,prob=c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1,size=100,prob=0.7)
flips2<-rbinom(1,size=100,prob=0.7)
flips2<-rbinom(100,size=1,prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,mean = 100, sd = 25)
rpois()
>rpois
?rpois
rpois(5)
rpois(5 ,lambda = 10)
replicate(100,rpois(5,10))
my_pois <- replicate(100,rpois(5,10))
my_pois
cm <- colMeans(x = my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
as.Date("1969-01-01")
d2<- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$dist, y = cars$speed, x.lab ="Speed")
plot(x = cars$dist, y = cars$speed, xlab ="Speed")
plot(x = cars$speed, y = cars$dist, xlab ="Speed")
plot(x = cars$speed, y = cars$dist, xlab ="Speed",ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab ="Speed",ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab ="Speed",ylab="Stopping Distance",title="main")
plot(x = cars$speed, y = cars$dist, xlab ="Speed",ylab="Stopping Distance", main ="main")
plot(x = cars$speed, y = cars$dist, xlab ="Speed",ylab="Stopping Distance", main ="My Plot")
plot(cars,main ="My Plot")
plot(cars,sub ="My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim =c(10,15))
plot(cars, pch=2
)
data(mtcars)
?boxplot
boxplot(mpg~cyl,data = mtcars)
hist(mtcars$mpg)
dgrammar
dgamma
lm
show
colSums
predict
x <- c(FALSE, FALSE, TRUE)
as.character(x)
as.double(x)
c(1,True)
c(1,TRUE)
c("a", 1)
c(list(1), "a")
c(TRUE, 1L)
1 == "1"
install.packages(c("boot", "class", "cluster", "codetools", "colorspace", "digest", "foreign", "formatR", "ggplot2", "googleVis", "highr", "httr", "jsonlite", "KernSmooth", "knitr", "lattice", "manipulate", "MASS", "Matrix", "mgcv", "mime", "nlme", "nnet", "R.matlab", "R.methodsS3", "R.oo", "R.utils", "Rcpp", "RCurl", "rmarkdown", "rpart", "rstudioapi", "spatial", "survival", "XLConnect"))
getwd()
setwd("Development//R-studio//dataproduct-pitching")
publish(title = "Wind & Temperature Measurement",'index.html', host ='rpubs')
library(slidify)
publish(title = "Wind & Temperature Measurement",'index.html', host ='rpubs')
publish(title = "Wind & Temperature Measurement",'index.html', host ='rpubs')
publish(title = "Wind & Temperature Measurement",'index.html', host ='rpubs')
publish(title = "Wind & Temperature Measurement",'index.html', host ='rpubs')
publish(title = "Wind & Temperature Measurement",'index.html', host ='rpubs')
publish(title = "Wind & Temperature Measurement",'index.html', host ='rpubs')
publish(title = "Wind & Temperature Measurement",'index.html', host ='rpubs')
publish(title = "Wind & Temperature Measurement",'index.html', host ='rpubs')
options(rpubs.upload.method = "internal")
options(RCurlOptions = list(verbose = FALSE, capath = system.file("CurlSSL", "cacert.pem", package = "RCurl"), ssl.verifypeer = FALSE))
publish(title = "Wind & Temperature Measurement",'index.html', host ='rpubs')
library(RCurl)
publish(title = "Wind & Temperature Measurement",'index.html', host ='rpubs')
library(bitops)
publish(title = "Wind & Temperature Measurement",'index.html', host ='rpubs')
